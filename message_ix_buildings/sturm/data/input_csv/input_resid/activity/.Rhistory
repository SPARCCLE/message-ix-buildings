filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_parameter", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_parameter %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r")) %>%
filter(category != "categories")
# Extract data paths, file names and variable names
input_paths <- input %>% select(path_file) %>% pull # Extract paths to input files
input_files <- input %>% select(name_file) %>% pull # Extract file names
input_names <- input %>% select(name_parameter) %>% pull # Extract variable names
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
View(d)
length(input_names)
d <- setNames(d,input_names)
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/"
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
} else {DF_L = DF}
output = DF_L
}
path_in_csv <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/"
files <- list.files(path=path_in_csv, pattern="*.csv", full.names=TRUE, recursive=FALSE)
files
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
sub.folders
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
files
sub.folders
class(sub.folders)
files
?write_csv
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("//d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("//d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
files_name <- "./input_basic/pop_ssp1.csv"
file_name <- "./input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
files[1]
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
DF = read_csv(file_name)
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/input_basic/pop_ssp1.csv"
DF = read_csv(file_name)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
files
### PROCESS DATA
lapply(files, fun_toLong)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(file_name)
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(file_name)
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print("Processed: ",file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste(file_name))
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste0("Processed: ", file_name))
}
}
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste(file_name))
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste0("Processed: ", file_name))
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste(file_name))
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste0("Processed: ", file_name))
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
files
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste(file_name))
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste0("Processed: ", file_name))
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF = read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05_test/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
DF = read_csv(file_name)
file_name
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
class(file_name)
file_name <- "C:\Users\mastrucc.IIASA2003\IIASA\ECE.prog - DG_GROW_2023-2025\Modelling\input\input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
DF <- read_csv(file_name)
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
DF <- read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp1.csv"
lapply(file_name, fun_toLong)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste(file_name))
DF <- read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste("Processed: ", file_name))
}
}
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp2.csv"
lapply(file_name, fun_toLong)
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste("Input: ", file_name))
DF <- read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste("Processed: ", file_name))
}
}
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste("Input: ", file_name))
DF <- read_csv(file_name)
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste("Processed: ", file_name))
}
}
file_name <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/input_csv/input_basic/pop_ssp3.csv"
lapply(file_name, fun_toLong)
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
path_in_csv
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
warnings()
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/IIASA/ECE.prog - DG_GROW_2023-2025/Modelling/input/input_backup_2023_06_05 - Copy/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste("Input: ", file_name))
DF <- read_csv(file_name)
if("scenario" %in% names(DF)){DF <- DF %>% select(-scenario)}
if("ssp" %in% names(DF)){DF <- DF %>% select(-ssp)}
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste("Processed: ", file_name))
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
library("tidyverse")
setwd("H:/MyDocuments/MESSAGE-buildings/analysis/inputs_to_long_format/")
# CONVERT INPUT DATA TO LONG FORMAT
path_in_csv <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/"
# Function to convert dataframes to long format
fun_toLong <- function(file_name){
print(paste("Input: ", file_name))
DF <- read_csv(file_name)
if("scenario" %in% names(DF)){DF <- DF %>% select(-scenario)}
if("ssp" %in% names(DF)){DF <- DF %>% select(-ssp)}
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
write_csv(DF_L, file_name)
print(paste("Processed: ", file_name))
}
}
# vector of subfolders
sub.folders <- list.dirs(path_in_csv, recursive=TRUE)[-1]
# vector of all files
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
### PROCESS DATA
lapply(files, fun_toLong)
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
b <- read_csv("C:\Users\mastrucc.IIASA2003\OneDrive - IIASA\GitHub\message-ix-buildings\STURM_data\input_csv\input_resid\activity.csv")
setwd("C:\Users\mastrucc.IIASA2003\OneDrive - IIASA\GitHub\message-ix-buildings\STURM_data\input_csv\input_resid\activity")
setwd("C:\Users\mastrucc.IIASA2003\OneDrive - IIASA\GitHub\message-ix-buildings\STURM_data\input_csv\input_resid\activity")
setwd("C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/input_resid/activity/")
b <- read_csv("bld_demolition_distr.csv")
View(b)
b_L <- b %>% pivot_longer(cols = c("dem_shape","dem_scale"), names_to = "parameter", values_to = "value")
View(b_L)
b_L <- b %>% pivot_longer(cols = c("dem_shape","dem_scale"), names_to = "parameter", values_to = "value", prefix = "dem")
b_L <- b %>% pivot_longer(cols = c("dem_shape","dem_scale"), names_to = "parameter", values_to = "value", prefix = "dem_")
b_L <- b %>% pivot_longer(cols = c("dem_shape","dem_scale"), names_to = "parameter", values_to = "value", names_prefix = "dem_")
View(b_L)
write_csv(b_L,"bld_demolition_distr_long.csv")
getwd
getwd()
path_in <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/"
sub.folders <- list.dirs(path_in, recursive=TRUE)[-1]
fun_test_cols <- function(file_name){
d <- read_csv(file_name)
if(!"value" %in% names(d)){print(file_name)}
}
lapply(files, fun_test_cols)
sub.folders <- list.dirs(path_in, recursive=TRUE)[-1]
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
files
fun_test_cols <- function(file_name){
d <- read_csv(file_name)
if(!"value" %in% names(d)){print(file_name)}
}
lapply(files, fun_test_cols)
fun_test_cols <- function(file_name){
d <- read_csv(file_name, message=FALSE)
if(!"value" %in% names(d)){print(file_name)}
}
lapply(files, fun_test_cols)
fun_test_cols <- function(file_name){
d <- read_csv(file_name, show_col_types = FALSE)
if(!"value" %in% names(d)){print(file_name)}
}
lapply(files, fun_test_cols)
### Edit "cost_int_ren_heat" files
file_names <- c("cost_int_ren_heat.csv", "cost_int_ren_heat_ELEC.csv", "cost_int_ren_heat_FUELSWT.csv", "cost_int_ren_heat_LED.csv" )
path_in_cost <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/input_resid/activity/"
file_names <- paste0(path_in_cost, c("cost_int_ren_heat.csv", "cost_int_ren_heat_ELEC.csv", "cost_int_ren_heat_FUELSWT.csv", "cost_int_ren_heat_LED.csv" ))
file_names
### Edit "cost_int_ren_heat" files
path_in_cost <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/input_resid/activity/"
file_names <- paste0(path_in_cost, c("cost_int_ren_heat.csv", "cost_int_ren_heat_ELEC.csv", "cost_int_ren_heat_FUELSWT.csv", "cost_int_ren_heat_LED.csv" ))
fun_long_cost_int_heat <- function(file_name){
d <- read_csv(file_name)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value") %>%
rename(fuel_heat_i = fuel_heat)
write_csv(d_L,file_name)
}
fun_long_cost_int_heat <- function(file_name){
d <- read_csv(file_name)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value") %>%
rename(fuel_heat_i = fuel_heat)
write_csv(d_L,file_name)
}
lapply(files, fun_long_cost_int_heat)
file_name <- file_names[1]
d <- read_csv(file_name)
View(d)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value")
View(d_L)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value") %>%
rename(fuel_heat_i = fuel_heat)
View(d_L)
### Edit "cost_int_ren_heat" files
path_in_cost <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/input_resid/activity/"
file_names <- paste0(path_in_cost, c("cost_int_ren_heat.csv", "cost_int_ren_heat_ELEC.csv", "cost_int_ren_heat_FUELSWT.csv", "cost_int_ren_heat_LED.csv" ))
file_names
fun_long_cost_int_heat <- function(file_name){
d <- read_csv(file_name, show_col_types = FALSE)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value") %>%
rename(fuel_heat_i = fuel_heat)
write_csv(d_L,file_name)
}
lapply(files, fun_long_cost_int_heat)
file_name <- file_names[1]
fun_long_cost_int_heat(file_name)
### Edit "cost_int_ren_heat" files
path_in_cost <- "C:/Users/mastrucc.IIASA2003/OneDrive - IIASA/GitHub/message-ix-buildings/STURM_data/input_csv/input_resid/activity/"
file_names <- paste0(path_in_cost, c("cost_int_ren_heat.csv", "cost_int_ren_heat_ELEC.csv", "cost_int_ren_heat_FUELSWT.csv", "cost_int_ren_heat_LED.csv" ))
fun_long_cost_int_heat <- function(file_name){
d <- read_csv(file_name, show_col_types = FALSE)
d_L <- d %>% pivot_longer(cols=c("biomass_solid", "coal", "electricity", "gas", "oil"),
names_to = "fuel_heat_f", values_to = "value") %>%
rename(fuel_heat_i = fuel_heat)
write_csv(d_L,file_name)
}
lapply(file_names, fun_long_cost_int_heat)
file_name <- file_names[2]
fun_long_cost_int_heat(file_name)
file_name <- file_names[3]
fun_long_cost_int_heat(file_name)
file_name <- file_names[4]
fun_long_cost_int_heat(file_name)
file_name <- file_names[5]
fun_long_cost_int_heat(file_name)
sub.folders <- list.dirs(path_in, recursive=TRUE)[-1]
files <- list.files(path=sub.folders, pattern="*.csv", full.names=TRUE, recursive=FALSE)
fun_test_cols <- function(file_name){
d <- read_csv(file_name, show_col_types = FALSE)
if(!"value" %in% names(d)){print(file_name)}
}
lapply(files, fun_test_cols)
