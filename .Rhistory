<<<<<<< Updated upstream
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
View(d)
d <- setNames(d,input_names)
View(d)
d[[1]]
d[[2]]
a<-fun_toLong( d[[2]])
d2 <- d[[2]]
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
output = DF_L
}
a<-fun_toLong( d[[2]])
View(a)
d2 <- d[[2]]
View(d2)
d2 %>% select(matches("\\d{4}"))
d1 <- d[[1]]
d1 %>% select(matches("\\d{4}"))
names(d1)
names(d2)
?grep
grep("\\d{4}", names(d1))
grep("\\d{4}", names(d2))
grepl("\\d{4}", names(d1))
grepl("\\d{4}", names(d2))
a1 <- grep("\\d{4}", names(d1))
a2 <- grep("\\d{4}", names(d2))
a1
length(a1)
length(a2)
length(a2>0)
length(a2)>0
a1 <- fun_toLong( d[[1]])
grep("\\d{4}", names(d[[2]]))>0
grep("\\d{4}", names(d[[2]]))
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
} else {DF_L = DF}
output = DF_L
}
a1 <- fun_toLong( d[[1]])
View(a1)
a2 <- fun_toLong( d[[2]])
View(a2)
# PROCESS DATA - Convert timeseries to long format
d1 <- lapply(d, fun_toLong)
View(d1)
View(d1[[2]])
View(d[[2]])
View(d1[[1]])
View(d[[1]])
# PROCESS DATA - Convert timeseries to long format
d <- lapply(d, fun_toLong)
input_names
View(input)
input_names <- input %>% select(name_input) %>% pull
input_files <- input %>% select(name_file) %>% pull
input_names
name
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
DF_R <- DF %>% rename(value=name)
output = DF_R
}
a <- fun_rename(d[[1]],"xxx")
?rename
DF_R <- DF %>% rename(name=value)
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
DF_R <- DF %>% rename(name=value)
output = DF_R
}
a <- fun_rename(d[[1]],"xxx")
View(a)
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
DF_R <- DF %>% rename_with(value, ~paste(name))
output = DF_R
}
a <- fun_rename(d[[1]],"xxx")
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
DF_R <- DF %>% rename_with(value, ~paste(name), .cols=value)
output = DF_R
}
a <- fun_rename(d[[1]],"xxx")
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
DF_R <- DF %>% rename_with(~paste(name), .cols=value)
output = DF_R
}
a <- fun_rename(d[[1]],"xxx")
View(a)
# PROCESS DATA - Rename "value" column
d1 <- lapply(d, fun_rename(name=input_names))
# PROCESS DATA - Rename "value" column
d1 <- lapply(d, fun_rename, name=input_names)
View(d1)
View(d1[[1]])
?mapply
# PROCESS DATA - Rename "value" column
d1 <- mapply(d, fun_rename, name=input_names)
# PROCESS DATA - Rename "value" column
d1 <- mapply(fun_rename, d, name=input_names)
# PROCESS DATA - Rename "value" column
d1 <- mapply(fun_rename, d, input_names)
?Map
# PROCESS DATA - Rename "value" column
d1 <- mapply(fun_rename, d, input_names, SIMPLIFY = FALSE)
d1 <- Map(fun_rename, d, input_names)
a <- fun_rename(d[[1]],"xxx")
length(d)
for(i in 1:length(d)){if(length(grep("value", names(d[[i]]))==0, print(named[[i]]))}
name(d[[1]])
names(d[[1]])
d[[1]]
names(d)
names(d)[1]
for(i in 1:length(d)){if(length(grep("value", names(d[[i]]))==0)) {print(names(d)[i])}}
View(d[[1]])
View(d[[2]])
names(d[[1]])
grep("value", names(d[[1]]))
i
i=1
length(grep("value", names(d[[i]]))
)
for(i in 1:length(d)){if(length(grep("value", names(d[[i]])))==0) {print(names(d)[i])}}
View(d)
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
if(length(grep("value", names(DF)))==0) stop(paste(deparse(substitute(DF)),'no columns named: value'))
DF_R <- DF %>% rename_with(~paste(name), .cols=value)
output = DF_R
}
d1 <- Map(fun_rename, d, input_names)
?mapply
View(input)
=======
demo()
demo()
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# # call STURM
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
# # write results to csv file
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
# # write results to csv file
# write.csv(sturm_scenarios,paste("./temp/",sect,"_sturm.csv",sep=""),row.names=F)
>>>>>>> Stashed changes
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
if(length(grep("\\d{4}", names(DF)))>0){ # If column names contain years, convert to long format over years, otherwise return the same dataframe
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(year=as.integer(year))
} else {DF_L = DF}
output = DF_L
}
# Function to rename data inputs
fun_rename <- function(DF,name){ ## DF = dataframe; name = name to relabel the "value" column
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
if(length(grep("value", names(DF)))==0) stop(paste(deparse(substitute(DF)),'no columns named: value'))
<<<<<<< Updated upstream
DF_R <- DF %>% rename_with(~paste(name), .cols=value)
output = DF_R
}
# # Check if "value" is among the column names
# for(i in 1:length(d)){if(length(grep("value", names(d[[i]])))==0) {print(names(d)[i])}}
=======
# DF_R <- DF %>% rename_with(~paste(name), .cols=value) # Works with only one "value" column per dataframe
DF_R <- DF %>% rename_with(~gsub("value", name, names(DF)), .cols = everything()) # works also with multiple "value1", "value2", etc. columns
output = DF_R
}
>>>>>>> Stashed changes
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list_",sector,".csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
View(scenarios)
View(scenarios)
type(scenarios)
typeof(scenarios)
typeof(scen_pars)
typeof(scen_setup)
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
typeof(scen_setup)
View(scen_setup)
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
View(input)
view(input)
typeof(input)
View(scen_setup)
View(scen_setup)
view(path_in_csv)
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>% # Exclude lines with "skip" indication
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
<<<<<<< Updated upstream
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r"))
=======
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r")) %>%
>>>>>>> Stashed changes
filter(category != "categories")
### TEMPORARY ### EXCLUDE SPECIAL DATA FILES
input <- input %>%
filter(!name_input %in% c("bld_dyn_par","cool_data_scen","en_m2_sim_r")) %>%
filter(category != "categories")
<<<<<<< Updated upstream
=======
# Extract data paths, file names and variable names
>>>>>>> Stashed changes
input_paths <- input %>% select(path_file) %>% pull # Extract paths to input files
input_files <- input %>% select(name_file) %>% pull # Extract file names
input_names <- input %>% select(name_input) %>% pull # Extract variable names
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
<<<<<<< Updated upstream
d <- setNames(d,input_files)
# PROCESS DATA - Convert timeseries to long format
d <- lapply(d, fun_toLong)
d1 <- Map(fun_rename, d, input_names)
View(d1)
View(d1[[1]])
View(d1[[2]])
d1 <- Map(fun_rename, d, input_names)
d <- Map(fun_rename, d, input_names)
### TEMPORARY ### Extract dataframes to global environment
list2env(d, .GlobalEnv)
View(eff_cool_ssp2)
=======
d <- setNames(d,input_names)
View(d)
View(d)
>>>>>>> Stashed changes
