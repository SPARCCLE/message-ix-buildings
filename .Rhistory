width = 16, height = 8, units = "cm") # Save the last plot
#p_en_reg_heat_byeneff + facet_grid(scenario~region) #+ theme_minimal()
p_en_int_reg #+ facet_wrap(~hh_group_name) #+ theme_minimal()
#### 5) Energy intensity (heat+cool) - regional ---
p_en_int_reg <- ggplot() +
geom_line(d1 %>%
filter(scenario %in% scenarios_LS) %>%
left_join(hh_groups) %>%
mutate(across(hh_group_name, factor, levels=hh_groups$hh_group_name)),
mapping = aes(x=year, y= en_int, group = scenario_name,
color = hh_group, linetype = scenario)) +
#geom_hline(yintercept=0,color = "grey80", size= 0.5) +
scale_color_manual(values = col_hh_group, labels = lab_hh_group, name = title_hh_group) +
scale_linetype_manual(values = c("solid","dashed"), labels=scenarios$scenario_name[2:3], name = "") + # , name = "Scenario"
guides(colour = "none") +
theme_bw()+
theme(legend.position = "bottom",
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# panel.grid.major.x = element_blank(),
# panel.grid.minor.x = element_blank(),
legend.title=element_text(size=sztitle),
legend.text=element_text(size=sztxt),
axis.text=element_text(size=sztxt),
#axis.text.x=element_text(size=sztxt, angle = 45),
axis.title=element_text(size=sztitle)
) +
scale_y_continuous(limits=c(0, 50),breaks=seq(0,50,10)) +
labs(#title=paste0(""),
x ="Year",
y = "Final energy intensity (kWh/m2)"
)
#p_en_reg_heat_byeneff + facet_grid(scenario~region) #+ theme_minimal()
p_en_int_reg #+ facet_wrap(~hh_group_name) #+ theme_minimal()
#p_en_reg_heat_byeneff + facet_grid(scenario~region) #+ theme_minimal()
p_en_int_reg + facet_wrap(~hh_group_name, nrows=1) #+ theme_minimal()
#p_en_reg_heat_byeneff + facet_grid(scenario~region) #+ theme_minimal()
p_en_int_reg + facet_wrap(~hh_group_name, nrow=1) #+ theme_minimal()
# Variant: all plots in one row
p_en_int_reg + facet_wrap(~hh_group_name,nrow=1) #+ theme_minimal()
ggsave(paste0(path_plots, "fig3-A_VAR_energy_int_glo_diff.png"),
width = 14, height = 8, units = "cm") # Save the last plot
ggsave(paste0(path_plots, "fig3-A_VAR_energy_int_glo_diff.png"),
width = 12, height = 8, units = "cm") # Save the last plot
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# SCENARIO-DEPENDENT PARAMETERS
pars_scen <- names(scenarios)
input_basic <- input %>% filter(input$category == "socioeconomics")
for (i in 1:nrow(input_basic)){
dtmp <- read_csv(paste0(path_in_csv,"input_socioeconomics/",input$name_file[i],".csv"))
assign(paste(input$name_input[i]), dtmp)
}
i
input$name_file[i]
input_basic <- input %>% filter(input$category == "socioeconomics")
for (i in 1:nrow(input_basic)){
dtmp <- read_csv(paste0(path_in_csv,"input_socioeconomics/",input_basic$name_file[i],".csv"))
assign(paste(input_basic$name_input[i]), dtmp)
}
View(pop_fut)
?setNames
eval?
?eval
?list2env
in
i
out
in
View(input)
names(scenarios)
names(scenarios)
[!names(scenarios) %in% c("scenario_id", "scenario_name")]
!names(scenarios) %in% c("scenario_id", "scenario_name")
# SCENARIO-DEPENDENT PARAMETERS
pars_scen <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
pars_scen
View(scenarios)
scenario
pars_scen <- scenarios %>% filter(scenario_name == run)
View(pars_scen)
pars_scen <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name))
View(pars_scen)
scen <- "NAV_Dem-NPi-all"
pars_scen <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name))
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
pars_scen <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
pars_scen <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name))
# Create vector of scenario-dependent parameters
pars_scen <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
pars_scen_df <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols =)
pars_scen
View(input)
pars_scen_df <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = pars_scen, names_to = "name_input", values_to = "scenario")
pars_scen_df <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(pars_scen), names_to = "name_input", values_to = "scenario")
View(pars_scen_df)
input1 <- input %>%
left_join(pars_scen_df) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
))
View(input1)
input1 <- input %>%
left_join(pars_scen_df) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"/",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
input1 <- input %>%
left_join(pars_scen_df) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
input <- input %>%
left_join(pars_scen_df) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Extract paths to input files
input_paths <- input %>% select(path_file) %>% pull
input_paths
input_names <- input %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
d
# Extract paths to input files
input_paths <- input[1:3,] %>% select(path_file) %>% pull
input_names <- input[1:3,] %>% select(name_file) %>% pull
input_paths
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
View(d)
setNames()
?setNames
d <- setNames(d,input_names)
View(d)
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Extract paths to input files
input_paths <- input[1:3,] %>% select(path_file) %>% pull
input_names <- input[1:3,] %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
d <- setNames(d,input_names)
View(d)
?list2env
# Script to be run in Rstudio
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
# # write results to csv file
# write.csv(sturm_scenarios,paste("./temp/",sect,"_sturm.csv",sep=""),row.names=F)
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Extract paths to input files
input_paths <- input[1:3,] %>% select(path_file) %>% pull
input_names <- input[1:3,] %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
d <- setNames(d,input_names)
# Script to be run in Rstudio
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
# # write results to csv file
# write.csv(sturm_scenarios,paste("./temp/",sect,"_sturm.csv",sep=""),row.names=F)
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "socioeconomics",
paste0(path_in_csv,"input_socioeconomics/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Extract paths to input files
input_paths <- input[1:3,] %>% select(path_file) %>% pull
input_names <- input[1:3,] %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
d <- setNames(d,input_names)
View(input)
View(scen_setup)
View(scenarios)
#remove provisional inputs
rm(input,scen_setup)
?list2DF
list2env(d)
list2env(d, envir)
list2env(d, .GlobalEnv)
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
View(input)
# Script to be run in Rstudio
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("./STURM_model/F10_scenario_runs_MESSAGE_2100.R")
rcode_path <- paste(getwd(),"/STURM_model/",sep="")
data_path <- paste(getwd(),"/STURM_data/",sep="")
rout_path <- paste(getwd(),"/STURM_output/",sep="")
prices<-read.csv(paste0(data_path,"input_prices_R12.csv"))
scen <- "NAV_Dem-NPi-ref"
scen <- "NAV_Dem-NPi-all"
#scen <- "SDP_EI-NPi"
#scen <- "NAV_Dem-NPi-tec"
#clim_scen <- "BL"
sect <- "resid"
#sect <- "comm"
# Additional settings moved from "run_scenario" function - to run model out of the function
run=scen
#scenario_name=paste(ssp_scen,clim_scen,sep="_"),
scenario_name=scen
prices=prices
path_in=data_path
path_rcode=rcode_path
path_out=rout_path
geo_level_report="R12"
sector=sect
#report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
report_type = c("MESSAGE","STURM","NAVIGATE") # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
# # call STURM
# sturm_scenarios <- run_scenario(run=scen,
#                                 #scenario_name=paste(ssp_scen,clim_scen,sep="_"),
#                                 scenario_name=ssp_scen,
#                                 prices=prices,
#                                 path_in=data_path,
#                                 path_rcode=rcode_path,
#                                 path_out=rout_path,
#                                 geo_level_report="R12",
#                                 sector=sect,
#                                 #report_type = c("MESSAGE","NGFS","STURM"), # Available reports: c("MESSAGE","STURM","IRP","NGFS")
#                                 report_type = c("MESSAGE","STURM","NAVIGATE"), # Available reports: c("MESSAGE","STURM","IRP","NGFS","NAVIGATE")
#                                 report_var=c("energy","material") # Available report variables: c("energy","material","vintage","dle")
#                                 )
#
# # write results to csv file
# write.csv(sturm_scenarios,paste("./temp/",sect,"_sturm.csv",sep=""),row.names=F)
# Function to convert dataframes to long format
fun_toLong <- function(DF){ ## var_name excluded from inputs
if("data.frame"  %in% class(DF) == FALSE) stop(paste(deparse(substitute(DF)),'is not a data.frame'))
#if(class(var_name)!="character" | length(var_name)!= 1) stop(paste(deparse(substitute(var_name)),'is not a character unit vector. Please, provide a name in quotes.'))
DF_L <- pivot_longer(data=DF, values_to = "value", names_to = "year", cols=matches("\\d{4}")) %>%
mutate(Year=as.integer(Year))
output = DF_L
}
# PATH DATA INPUT FILES
path_in_csv <- "./STURM_data/input_csv/"
# IMPORT LIST OF INPUT DATA FILES
input <- read_csv(paste0(path_in_csv, "input_list.csv" ))
# IMPORT LIST OF SCENARIOS
scenarios <- read_csv(paste0(path_in_csv, "scenarios_TEST.csv" ))
# Create vector of scenario-dependent parameters
scen_pars <- names(scenarios)[!names(scenarios) %in% c("scenario_id", "scenario_name")]
# Scenario setup for scenario-dependent parameters
scen_setup <- scenarios %>%
filter(scenario_name == run) %>%
select(-c(scenario_id, scenario_name)) %>%
pivot_longer(cols = all_of(scen_pars), names_to = "name_input", values_to = "scenario")
# Input data: build vector of input file names for the current scenarios
input <- input %>%
left_join(scen_setup) %>%
filter(category !="skip") %>%
mutate(path_file = ifelse(category == "basic",
paste0(path_in_csv,"input_basic/",name_file),
paste0(path_in_csv,"input_",sector, "/",category,"/",name_file)
)) %>%
mutate(path_file = ifelse(!is.na(scenario),paste0(path_file,"_",scenario),path_file)) %>%
mutate(path_file = paste0(path_file,".csv"))
# Extract paths to input files
input_paths <- input[1:3,] %>% select(path_file) %>% pull
input_names <- input[1:3,] %>% select(name_file) %>% pull
# LOAD INPUT DATA
d <- lapply(input_paths, read_csv)
d <- setNames(d,input_names)
# # Extract dataframes to global environment
# list2env(d, .GlobalEnv)
#remove provisional inputs
rm(input,scen_setup)
## TODOs:
# - add full list of input data.
# - processing: from wide to long format
# - work on parameters name: consistency between file names and parameter names
# - check scenario/ssp columns
# - check how to provide inputs: list2env or keep inside lists?
View(d)
